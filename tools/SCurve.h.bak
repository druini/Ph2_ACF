/*!
*
* \file SCurve.h
* \brief Scurve class
* \author Georg AUZINGER
* \date 18 / 11 / 15
*
* \Support : georg.auzinger@cern.ch
*
*/

#ifndef SCurve_h__
#define SCurve_h__

#include "Tool.h"
#include "Channel.h"
#include "../Utils/Visitor.h"
#include "../Utils/CommonVisitors.h"


#include <map>

#include "TCanvas.h"
#include "TProfile.h"
#include "TString.h"
#include "TGraphErrors.h"
#include "TString.h"
#include "TText.h"

using namespace Ph2_HwDescription;
using namespace Ph2_HwInterface;
using namespace Ph2_System;


// Typedefs for Containers
typedef std::map<Cbc*, std::vector<Channel> > CbcChannelMap;
typedef std::vector<std::pair< std::string, uint8_t> > RegisterVector;
typedef std::map< int, std::vector<uint8_t> >  TestGroupChannelMap;

/*
Key=-1 to do calibration on all channels
Key=0-7 for the 8 Test Groups
*/

class SCurve : public Tool
{
  public:
    SCurve() {}

    // D'tor
    ~SCurve() {}


  protected:

    // Containers
    CbcChannelMap fCbcChannelMap;
    TestGroupChannelMap fTestGroupChannelMap;

    // Counters
    uint32_t fNCbc;
    uint32_t fNFe;

    // Settings
    bool fHoleMode;
    bool fTestPulse;
    uint8_t fTestPulseAmplitude;
    uint32_t fEventsPerPoint;
    bool fFitted;



  protected:
    void MakeTestGroups ( bool pAllChan );
    void setOffset ( uint8_t pOffset, int  pGroup );

    // SCurve related
    void measureSCurves ( int  pTGrpId, uint16_t pStartValue = 0 );
    void measureSCurvesOffset ( int  pTGrpId );
    uint32_t fillSCurves ( BeBoard* pBoard,  const Event* pEvent, uint16_t pValue, int  pTGrpId, bool pDraw = false );
    void initializeSCurves ( TString pParameter, uint16_t pValue, int  pTGrpId );

    // general stuff
    void setSystemTestPulse ( uint8_t pTPAmplitude, uint8_t pTestGroup, bool pTPState = false );
    //enable commissioning loops and Test Pulse
    void setFWTestPulse();

    //helpers for SCurve measurement
    void measureOccupancy (BeBoard* pBoard, int pTGrpId, std::map<Cbc*, uint32_t>& pHitCountMap);
    uint16_t findPedestal (int pTGrpId);
};


#endif
